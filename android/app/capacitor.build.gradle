apply plugin: 'com.android.application'

// 讀取 keystore.properties（若存在）
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
def hasKeystoreProps = false
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    hasKeystoreProps = true
}

android {
    namespace "com.mystictarot.app"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.mystictarot.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // 避免把 web 編譯暫存檔打包進去
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    // ✅ 強制以 Java 17 編譯（搭配你已修改的 capacitor.build.gradle -> VERSION_17）
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // ⚠️ 別放 kotlin{} / kotlinOptions{}；此專案不是 Kotlin，且前者會造成你看到的錯誤

    signingConfigs {
        // 優先使用 keystore.properties
        if (hasKeystoreProps) {
            def propsStoreFile   = keystoreProperties['storeFile']
            def propsStorePass   = keystoreProperties['storePassword']
            def propsAlias       = keystoreProperties['keyAlias']
            // 若沒填 keyPassword 就用 storePassword
            def propsKeyPass     = keystoreProperties['keyPassword'] ?: propsStorePass

            if (propsStoreFile && file(propsStoreFile).exists()
                    && propsStorePass && propsAlias && propsKeyPass) {
                release {
                    storeFile file(propsStoreFile)
                    storePassword propsStorePass
                    keyAlias propsAlias
                    keyPassword propsKeyPass
                }
            }
        }

        // 若沒有 props，就使用 Codemagic 的環境變數與 CI 腳本還原的檔案
        if (!signingConfigs.findByName('release')) {
            def storeFileEnv   = "upload-keystore.jks" // 由 YAML 腳本還原到 android/app
            def storePassEnv   = System.getenv("CM_KEYSTORE_PASSWORD")
            def aliasEnv       = System.getenv("CM_KEY_ALIAS")
            def keyPassEnvRaw  = System.getenv("CM_KEY_PASSWORD")
            def keyPassEnv     = keyPassEnvRaw ?: storePassEnv

            if (file(storeFileEnv).exists() && storePassEnv && aliasEnv && keyPassEnv) {
                release {
                    storeFile file(storeFileEnv)
                    storePassword storePassEnv
                    keyAlias aliasEnv
                    keyPassword keyPassEnv
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 只有在有設定到 release 簽章時才套用，避免本地或 CI 沒檔案時出錯
            if (signingConfigs.findByName('release')) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"

    def cordovaPluginsProject = rootProject.findProject(':capacitor-cordova-android-plugins')
    if (cordovaPluginsProject != null) {
        implementation cordovaPluginsProject
    } else {
        logger.lifecycle('Skipping dependency on :capacitor-cordova-android-plugins because the project is not available.')
    }
}

// ⚠️ 禁止遞迴載入自己，否則會導致 StackOverflow。
// 原生 Capacitor 設定已直接內建於本檔，因此不再額外 apply 其他腳本。

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
