apply plugin: 'com.android.application'

// ---- 可選：讀 keystore.properties（本機開發時方便） ----
def keystorePropertiesFile = rootProject.file("keystore.properties")
def props = new Properties()
if (keystorePropertiesFile.exists()) {
    props.load(new FileInputStream(keystorePropertiesFile))
}

// ---- 以環境變數為主，無則回退到 keystore.properties ----
def keystorePath   = "upload-keystore.jks" // Codemagic 會還原到 android/app
def storePassEnv   = System.getenv("CM_KEYSTORE_PASSWORD")
def aliasEnv       = System.getenv("CM_KEY_ALIAS")
def keyPassEnv     = System.getenv("CM_KEY_PASSWORD")

// **避免同名遮蔽 DSL 方法：用不同名稱**
def storePassVal   = storePassEnv ?: props.getProperty("storePassword")
def aliasVal       = aliasEnv     ?: props.getProperty("keyAlias")
def keyPassVal     = keyPassEnv   ?: props.getProperty("keyPassword")
def storeFilePath  = file(keystorePath)

def signingReady = storeFilePath.exists() && storePassVal && aliasVal && keyPassVal

android {
    namespace "com.mystictarot.app"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.mystictarot.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    // 只在資訊齊全時才建立 release 簽章
    signingConfigs {
        if (signingReady) {
            release {
                storeFile storeFilePath
                storePassword storePassVal
                keyAlias aliasVal
                keyPassword keyPassVal
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (signingConfigs.findByName('release')) {
                signingConfig signingConfigs.release
            } else {
                if (project.gradle.startParameter.taskNames.any { it.toLowerCase().contains("release") }) {
                    throw new GradleException(
                        "Release signing is not configured.\n" +
                        "Expected keystore: ${storeFilePath}\n" +
                        "Exists: ${storeFilePath.exists()}\n" +
                        "Env CM_KEYSTORE_PASSWORD present: ${storePassEnv != null}\n" +
                        "Env CM_KEY_ALIAS present: ${aliasEnv != null}\n" +
                        "Env CM_KEY_PASSWORD present: ${keyPassEnv != null}\n" +
                        "If you are building on Codemagic, ensure the keystore is restored to android/app/upload-keystore.jks\n" +
                        "and the three env vars are set."
                    )
                }
            }
        }

        debug {
            // debug 不強制簽章
        }
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"

    def cordovaPluginsProject = rootProject.findProject(':capacitor-cordova-android-plugins')
    if (cordovaPluginsProject != null) {
        implementation cordovaPluginsProject
    } else {
        logger.lifecycle('Skipping dependency on :capacitor-cordova-android-plugins because the project is not available.')
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
