apply plugin: 'com.android.application'

// 讀取 keystore.properties（若存在）
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
def hasKeystoreProps = false
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    hasKeystoreProps = true
}

android {
    namespace "com.mystictarot.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.mystictarot.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    signingConfigs {
        if (hasKeystoreProps) {
            def propsStoreFile   = keystoreProperties['storeFile']
            def propsStorePass   = keystoreProperties['storePassword']
            def propsAlias       = keystoreProperties['keyAlias']
            def propsKeyPass     = keystoreProperties['keyPassword'] ?: propsStorePass

            if (propsStoreFile && file(propsStoreFile).exists()
                    && propsStorePass && propsAlias && propsKeyPass) {
                release {
                    storeFile file(propsStoreFile)
                    storePassword propsStorePass
                    keyAlias propsAlias
                    keyPassword propsKeyPass
                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signingConfigs.findByName('release')) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    def cordovaPluginsProject = rootProject.findProject(':capacitor-cordova-android-plugins')
    if (cordovaPluginsProject != null) {
        implementation cordovaPluginsProject
    } else {
        logger.lifecycle('Skipping dependency on :capacitor-cordova-android-plugins because the project is not available.')
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
