apply plugin: 'com.android.application'

// 讀取 keystore 屬性（如果存在）
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
def useKeystoreProperties = false
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    useKeystoreProperties = true
}

android {
    namespace "com.mystictarot.app"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.mystictarot.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
            // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    // 簽章設定：優先使用 keystore.properties，其次使用環境變數
    // 只有在簽章資訊完整且檔案存在時才建立 release 簽章配置
    signingConfigs {
        if (useKeystoreProperties) {
            def keystoreFile = rootProject.file(keystoreProperties['storeFile'])
            if (keystoreFile.exists()) {
                release {
                    storeFile keystoreFile
                    storePassword keystoreProperties['storePassword']
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                }
            }
        } else {
            def keystorePath = "upload-keystore.jks"
            if (file(keystorePath).exists()) {
                def keystorePassword = System.getenv("CM_KEYSTORE_PASSWORD")
                def keyAliasValue = System.getenv("CM_KEY_ALIAS") 
                def keyPasswordValue = System.getenv("CM_KEY_PASSWORD")
                
                if (keystorePassword && keyAliasValue && keyPasswordValue) {
                    release {
                        storeFile file(keystorePath)
                        storePassword keystorePassword
                        keyAlias keyAliasValue
                        keyPassword keyPasswordValue
                    }
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            // 只有在 release 簽章配置存在時才應用
            if (signingConfigs.findByName('release')) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    def cordovaPluginsProject = rootProject.findProject(':capacitor-cordova-android-plugins')
    if (cordovaPluginsProject != null) {
        implementation cordovaPluginsProject
    } else {
        logger.lifecycle('Skipping dependency on :capacitor-cordova-android-plugins because the project is not available.')
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
